// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.1
// source: encoder.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Encoder_EncodeText_FullMethodName  = "/encoder.Encoder/EncodeText"
	Encoder_EncodeImage_FullMethodName = "/encoder.Encoder/EncodeImage"
)

// EncoderClient is the client API for Encoder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EncoderClient interface {
	EncodeText(ctx context.Context, in *EncodeTextRequest, opts ...grpc.CallOption) (*EncoderResponse, error)
	EncodeImage(ctx context.Context, in *EncodeImageRequest, opts ...grpc.CallOption) (*EncoderResponse, error)
}

type encoderClient struct {
	cc grpc.ClientConnInterface
}

func NewEncoderClient(cc grpc.ClientConnInterface) EncoderClient {
	return &encoderClient{cc}
}

func (c *encoderClient) EncodeText(ctx context.Context, in *EncodeTextRequest, opts ...grpc.CallOption) (*EncoderResponse, error) {
	out := new(EncoderResponse)
	err := c.cc.Invoke(ctx, Encoder_EncodeText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encoderClient) EncodeImage(ctx context.Context, in *EncodeImageRequest, opts ...grpc.CallOption) (*EncoderResponse, error) {
	out := new(EncoderResponse)
	err := c.cc.Invoke(ctx, Encoder_EncodeImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EncoderServer is the server API for Encoder service.
// All implementations must embed UnimplementedEncoderServer
// for forward compatibility
type EncoderServer interface {
	EncodeText(context.Context, *EncodeTextRequest) (*EncoderResponse, error)
	EncodeImage(context.Context, *EncodeImageRequest) (*EncoderResponse, error)
	mustEmbedUnimplementedEncoderServer()
}

// UnimplementedEncoderServer must be embedded to have forward compatible implementations.
type UnimplementedEncoderServer struct {
}

func (UnimplementedEncoderServer) EncodeText(context.Context, *EncodeTextRequest) (*EncoderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncodeText not implemented")
}
func (UnimplementedEncoderServer) EncodeImage(context.Context, *EncodeImageRequest) (*EncoderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncodeImage not implemented")
}
func (UnimplementedEncoderServer) mustEmbedUnimplementedEncoderServer() {}

// UnsafeEncoderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EncoderServer will
// result in compilation errors.
type UnsafeEncoderServer interface {
	mustEmbedUnimplementedEncoderServer()
}

func RegisterEncoderServer(s grpc.ServiceRegistrar, srv EncoderServer) {
	s.RegisterService(&Encoder_ServiceDesc, srv)
}

func _Encoder_EncodeText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncoderServer).EncodeText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Encoder_EncodeText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncoderServer).EncodeText(ctx, req.(*EncodeTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encoder_EncodeImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncoderServer).EncodeImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Encoder_EncodeImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncoderServer).EncodeImage(ctx, req.(*EncodeImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Encoder_ServiceDesc is the grpc.ServiceDesc for Encoder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Encoder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "encoder.Encoder",
	HandlerType: (*EncoderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EncodeText",
			Handler:    _Encoder_EncodeText_Handler,
		},
		{
			MethodName: "EncodeImage",
			Handler:    _Encoder_EncodeImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "encoder.proto",
}
